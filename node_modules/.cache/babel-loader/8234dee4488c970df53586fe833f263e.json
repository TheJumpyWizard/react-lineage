{"ast":null,"code":"import _slicedToArray from \"/Users/bk/data_work/react-lineage/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { parse } from 'node-sql-parser';\nexport function parseSqlQuery(query) {\n  var ast = parse(query);\n  if (!ast.from || !ast.from.length) {\n    throw new Error('Invalid SQL query: no FROM clause');\n  }\n  var table = ast.from[0].table;\n  var columns = [];\n  if (ast.select && ast.select.length) {\n    var _iterator = _createForOfIteratorHelper(ast.select),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        if (typeof item === 'string') {\n          // A column specified without an alias\n          columns.push({\n            table: table,\n            column: item\n          });\n        } else if (item.expr_type === 'column_ref') {\n          // A column specified with an alias\n          var _item$column$split = item.column.split(/\\s+as\\s+/i),\n            _item$column$split2 = _slicedToArray(_item$column$split, 2),\n            columnName = _item$column$split2[0],\n            alias = _item$column$split2[1];\n          columns.push({\n            table: table,\n            column: alias || columnName\n          });\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return {\n    table: table,\n    columns: columns\n  };\n}","map":{"version":3,"names":["parse","parseSqlQuery","query","ast","from","length","Error","table","columns","select","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","value","push","column","expr_type","_item$column$split","split","_item$column$split2","_slicedToArray","columnName","alias","err","e","f"],"sources":["/Users/bk/data_work/react-lineage/src/services/sqlParser.ts"],"sourcesContent":["import { parse } from 'node-sql-parser';\nimport { Column, ParsedQuery } from '../interfaces/interfaces.ts';\n\nexport function parseSqlQuery(query: string): ParsedQuery {\n  const ast = parse(query);\n  if (!ast.from || !ast.from.length) {\n    throw new Error('Invalid SQL query: no FROM clause');\n  }\n  const table = ast.from[0].table;\n  const columns: Column[] = [];\n  if (ast.select && ast.select.length) {\n    for (const item of ast.select) {\n      if (typeof item === 'string') {\n        // A column specified without an alias\n        columns.push({ table, column: item });\n      } else if (item.expr_type === 'column_ref') {\n        // A column specified with an alias\n        const [columnName, alias] = item.column.split(/\\s+as\\s+/i);\n        columns.push({ table, column: alias || columnName });\n      }\n    }\n  }\n  return { table, columns };\n}\n"],"mappings":";;;;AAAA,SAASA,KAAK,QAAQ,iBAAiB;AAGvC,OAAO,SAASC,aAAaA,CAACC,KAAa,EAAe;EACxD,IAAMC,GAAG,GAAGH,KAAK,CAACE,KAAK,CAAC;EACxB,IAAI,CAACC,GAAG,CAACC,IAAI,IAAI,CAACD,GAAG,CAACC,IAAI,CAACC,MAAM,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACtD;EACA,IAAMC,KAAK,GAAGJ,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACG,KAAK;EAC/B,IAAMC,OAAiB,GAAG,EAAE;EAC5B,IAAIL,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACM,MAAM,CAACJ,MAAM,EAAE;IAAA,IAAAK,SAAA,GAAAC,0BAAA,CAChBR,GAAG,CAACM,MAAM;MAAAG,KAAA;IAAA;MAA7B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA+B;QAAA,IAApBC,IAAI,GAAAJ,KAAA,CAAAK,KAAA;QACb,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;UAC5B;UACAR,OAAO,CAACU,IAAI,CAAC;YAAEX,KAAK,EAALA,KAAK;YAAEY,MAAM,EAAEH;UAAK,CAAC,CAAC;QACvC,CAAC,MAAM,IAAIA,IAAI,CAACI,SAAS,KAAK,YAAY,EAAE;UAC1C;UAAA,IAAAC,kBAAA,GAC4BL,IAAI,CAACG,MAAM,CAACG,KAAK,CAAC,WAAW,CAAC;YAAAC,mBAAA,GAAAC,cAAA,CAAAH,kBAAA;YAAnDI,UAAU,GAAAF,mBAAA;YAAEG,KAAK,GAAAH,mBAAA;UACxBf,OAAO,CAACU,IAAI,CAAC;YAAEX,KAAK,EAALA,KAAK;YAAEY,MAAM,EAAEO,KAAK,IAAID;UAAW,CAAC,CAAC;QACtD;MACF;IAAC,SAAAE,GAAA;MAAAjB,SAAA,CAAAkB,CAAA,CAAAD,GAAA;IAAA;MAAAjB,SAAA,CAAAmB,CAAA;IAAA;EACH;EACA,OAAO;IAAEtB,KAAK,EAALA,KAAK;IAAEC,OAAO,EAAPA;EAAQ,CAAC;AAC3B"},"metadata":{},"sourceType":"module"}