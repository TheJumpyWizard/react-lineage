{"ast":null,"code":"import _slicedToArray from \"/Users/bk/data_work/react-lineage/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/bk/data_work/react-lineage/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/bk/data_work/react-lineage/src/components/DataLineageScreen.tsx\";\nimport React, { useState } from 'react';\nimport { Graph } from 'react-d3-graph';\nvar DataLineageScreen = function DataLineageScreen(_ref) {\n  var table = _ref.table,\n    columns = _ref.columns;\n  // TODO: Implement data lineage graph data and rendering logic here\n  var data = {\n    nodes: [{\n      id: table\n    }].concat(_toConsumableArray(columns.map(function (col) {\n      return {\n        id: col.table + '.' + col.column\n      };\n    }))),\n    links: columns.map(function (col) {\n      return {\n        source: col.table + '.' + col.column,\n        target: table\n      };\n    })\n  };\n  var _useState = useState(data),\n    _useState2 = _slicedToArray(_useState, 2),\n    graphData = _useState2[0],\n    setGraphData = _useState2[1];\n  var _useState3 = useState({\n      node: {\n        color: 'lightblue',\n        size: 200,\n        highlightStrokeColor: 'blue'\n      },\n      link: {\n        highlightColor: 'blue'\n      },\n      height: 500,\n      width: 800\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    graphConfig = _useState4[0],\n    setGraphConfig = _useState4[1];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Data Lineage Graph\"), /*#__PURE__*/React.createElement(Graph, {\n    id: \"data-lineage-graph\",\n    data: graphData,\n    config: graphConfig,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DataLineageScreen;","map":{"version":3,"names":["React","useState","Graph","DataLineageScreen","_ref","table","columns","data","nodes","id","concat","_toConsumableArray","map","col","column","links","source","target","_useState","_useState2","_slicedToArray","graphData","setGraphData","_useState3","node","color","size","highlightStrokeColor","link","highlightColor","height","width","_useState4","graphConfig","setGraphConfig","createElement","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","config"],"sources":["/Users/bk/data_work/react-lineage/src/components/DataLineageScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Graph } from 'react-d3-graph';\n\ninterface DataLineageProps {\n  table: string;\n  columns: ColumnInfo[];\n}\n\ninterface ColumnInfo {\n  table: string;\n  column: string;\n}\n\nconst DataLineageScreen: React.FC<DataLineageProps> = ({ table, columns }) => {\n  // TODO: Implement data lineage graph data and rendering logic here\n  const data = {\n    nodes: [{ id: table }, ...columns.map((col) => ({ id: col.table + '.' + col.column }))],\n    links: columns.map((col) => ({ source: col.table + '.' + col.column, target: table }))\n  };\n\n  const [graphData, setGraphData] = useState(data);\n  const [graphConfig, setGraphConfig] = useState({\n    node: {\n      color: 'lightblue',\n      size: 200,\n      highlightStrokeColor: 'blue',\n    },\n    link: {\n      highlightColor: 'blue',\n    },\n    height: 500,\n    width: 800,\n  });\n\n  return (\n    <div>\n      <h1>Data Lineage Graph</h1>\n      <Graph\n        id=\"data-lineage-graph\"\n        data={graphData}\n        config={graphConfig}\n      />\n    </div>\n  );\n};\n\nexport default DataLineageScreen;\n\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,gBAAgB;AAYtC,IAAMC,iBAA6C,GAAG,SAAhDA,iBAA6CA,CAAAC,IAAA,EAA2B;EAAA,IAArBC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;EACrE;EACA,IAAMC,IAAI,GAAG;IACXC,KAAK,GAAG;MAAEC,EAAE,EAAEJ;IAAM,CAAC,EAAAK,MAAA,CAAAC,kBAAA,CAAKL,OAAO,CAACM,GAAG,CAAC,UAACC,GAAG;MAAA,OAAM;QAAEJ,EAAE,EAAEI,GAAG,CAACR,KAAK,GAAG,GAAG,GAAGQ,GAAG,CAACC;MAAO,CAAC;IAAA,CAAC,CAAC,EAAC;IACvFC,KAAK,EAAET,OAAO,CAACM,GAAG,CAAC,UAACC,GAAG;MAAA,OAAM;QAAEG,MAAM,EAAEH,GAAG,CAACR,KAAK,GAAG,GAAG,GAAGQ,GAAG,CAACC,MAAM;QAAEG,MAAM,EAAEZ;MAAM,CAAC;IAAA,CAAC;EACvF,CAAC;EAAC,IAAAa,SAAA,GAEgCjB,QAAQ,CAACM,IAAI,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACQtB,QAAQ,CAAC;MAC7CuB,IAAI,EAAE;QACJC,KAAK,EAAE,WAAW;QAClBC,IAAI,EAAE,GAAG;QACTC,oBAAoB,EAAE;MACxB,CAAC;MACDC,IAAI,EAAE;QACJC,cAAc,EAAE;MAClB,CAAC;MACDC,MAAM,EAAE,GAAG;MACXC,KAAK,EAAE;IACT,CAAC,CAAC;IAAAC,UAAA,GAAAZ,cAAA,CAAAG,UAAA;IAXKU,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAalC,oBACEhC,KAAA,CAAAmC,aAAA;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE1C,KAAA,CAAAmC,aAAA;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,oBAAkB,CAAK,eAC3B1C,KAAA,CAAAmC,aAAA,CAACjC,KAAK;IACJO,EAAE,EAAC,oBAAoB;IACvBF,IAAI,EAAEc,SAAU;IAChBsB,MAAM,EAAEV,WAAY;IAAAG,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACpB,CACE;AAEV,CAAC;AAED,eAAevC,iBAAiB"},"metadata":{},"sourceType":"module"}