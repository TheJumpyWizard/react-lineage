{"version":3,"sources":["/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/bootstrap","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/util.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/array-struct.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/expr.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/aggregation.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/assign.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/case.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/interval.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/tables.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/column.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/limit.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/command.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/exec.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/union.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/analyze.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/delete.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/alter.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/index-definition.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/func.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/over.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/select.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/create.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/window.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/insert.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/update.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/constrain.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/binary.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/with.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/show.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.single.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sql.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/index.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","dataTypeToSQL","dataType","length","scale","arrayStructTypeToSQL","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","eventKw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","within_group_orderby","fnName","overStr","overToSQL","distinct","separator","distinctSQL","orderby","orderOrPartitionByToSQL","withinGroup","filterStr","where","window_func","windowFuncToSQL","assign","leftVar","rightVal","binary_expr","binaryToSQL","case","res","conditions","len","cond","cast","castToSQL","column_ref","datatype","extract","extractFunToSQL","fulltext_search","fulltextSearchToSQL","function","funcToSQL","insert","unionToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","varToSQL","members","quoted","varName","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","nulls","select","_next","selectToSQL","unary_expr","unarExpr","space","operatorToSQL","as","column","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","index","index_columns","tableToSQL","tableInfo","unnestExpr","withOffset","with_offset","unnestToSQL","table","db","prefixStr","schema","tablesample","table_hint","schemaStr","tableName","values","valueSQL","valuesExpr","valuesToSQL","split","slice","tableSampleSQL","repeatable","tablesToSQL","tables","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","array_index","arrows","properties","order_by","offset","columnOffsetToSQL","number","arrow","columnDataType","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","generated","storage_type","generatedExpressionToSQL","asToSQL","asStr","test","against","getDual","star","columnsStr","has","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","seperator","limitOffsetToSQL","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","execVariablesToSQL","typeToSQLFn","alterToSQL","analyze","attach","createToSQL","deallocate","delete","from","columnInfo","addition","exec","parameters","update","updateToSQL","insertToSQL","drop","truncate","replace","declare","dec","at","declareInfo","createDefinitionToSQL","use","rename","renameInfo","storeProcessCall","desc","set","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","bigquery","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","trim","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","target","expression","alias","tail","dataTypeSuffix","symbolChar","array","arrayDimensionToSymbol","castType","cast_type","source","args_parentheses","collateStr","asWindowSpec","as_window_specification","asWindowSpecToSQL","selectIntoToSQL","into","position","intoType","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","lockingRead","locking_read","groupby","having","parentheses_symbol","qualify","top","windowInfo","withInfo","distinctToSQL","intoSQL","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","algorithm","definer","sqlSecurity","sql_security","view","withClause","viewName","createViewToSQL","windowSpec","window_specification","partitionby","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","constructArgsList","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","partitionToSQL","partitionArr","onDuplicateUpdate","on_duplicate_update","duplicateSet","setToSQL","sets","setItem","constraintDefinition","enforced","constraintSQL","rstr","isBetween","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","this","typeCase","parsers","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c11","head","createBinaryExprChain","peg$c16","createList","peg$c19","peg$literalExpectation","peg$c27","peg$c41","peg$c43","peg$c45","peg$c48","peg$c50","peg$c53","peg$c55","peg$c57","peg$c64","peg$c66","peg$c72","peg$c74","peg$c77","peg$c80","peg$c82","peg$c84","peg$c86","peg$c88","peg$c91","peg$c93","peg$c95","peg$c97","peg$c100","peg$c102","peg$c104","peg$c106","peg$c112","peg$c120","peg$c122","peg$c124","peg$c127","peg$c129","peg$c131","peg$c134","peg$c136","peg$c138","peg$c141","peg$c143","peg$c145","peg$c147","peg$c149","peg$c152","peg$c155","peg$c157","peg$c159","peg$c161","peg$c164","peg$c168","peg$c170","peg$c173","peg$c175","peg$c178","peg$c180","peg$c186","peg$c189","peg$c191","peg$c193","peg$c196","peg$c198","peg$c203","peg$c205","peg$c208","peg$c210","peg$c213","peg$c215","peg$c217","peg$c225","peg$c227","peg$c229","peg$c231","peg$c233","peg$c236","peg$c238","peg$c240","peg$c242","peg$c244","peg$c246","peg$c248","peg$c250","peg$c252","peg$c254","peg$c256","peg$c258","peg$c260","peg$c262","peg$c264","peg$c266","peg$c268","peg$c270","peg$c272","peg$c274","peg$c279","peg$c281","peg$c289","peg$c291","peg$c293","peg$c306","peg$c312","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c317","peg$c318","peg$classExpectation","peg$c319","peg$c320","peg$c321","peg$c322","peg$c323","peg$c324","peg$c326","peg$c328","peg$c330","peg$c332","peg$c334","peg$c353","peg$c355","peg$c357","peg$c359","peg$c361","peg$c366","peg$c370","peg$c386","peg$c390","nk","peg$c393","peg$c395","peg$c397","peg$c399","peg$c401","peg$c403","peg$c411","peg$c413","peg$c416","peg$c418","peg$c420","peg$c434","peg$c435","peg$c436","peg$c437","chars","peg$c438","peg$c439","peg$c441","peg$c442","peg$c443","peg$c447","peg$c448","peg$c449","peg$c450","peg$c451","peg$c452","peg$c453","peg$c455","peg$c473","peg$c475","peg$c477","peg$c479","peg$c481","peg$c483","peg$c485","peg$c487","peg$c489","peg$c491","peg$c493","peg$c495","peg$c497","peg$c499","peg$c501","peg$c503","peg$c505","peg$c507","peg$c509","peg$c511","peg$c513","peg$c515","peg$c517","peg$c519","peg$c523","peg$c534","peg$c537","ca","peg$c538","peg$c539","peg$c540","peg$c541","peg$c543","peg$c546","peg$c549","peg$c552","peg$c555","peg$c558","peg$c561","peg$c564","peg$c567","peg$c570","peg$c573","peg$c576","peg$c579","peg$c582","peg$c584","peg$c585","peg$c596","peg$c597","peg$c598","peg$c599","peg$c600","peg$c601","peg$c602","peg$c603","peg$c606","peg$c608","peg$c610","peg$c612","peg$c614","peg$c616","peg$c619","peg$c621","peg$c625","peg$c629","peg$c632","peg$c634","peg$c636","peg$c638","peg$c641","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c661","peg$c663","peg$c666","peg$c668","peg$c670","peg$c672","peg$c674","peg$c676","peg$c678","peg$c680","peg$c682","peg$c684","peg$c687","peg$c690","peg$c692","peg$c695","peg$c698","peg$c701","peg$c704","peg$c707","peg$c710","peg$c713","peg$c716","peg$c719","peg$c722","peg$c726","peg$c729","peg$c732","peg$c735","peg$c738","peg$c741","peg$c744","peg$c747","peg$c750","peg$c753","peg$c755","peg$c757","peg$c759","peg$c761","peg$c763","peg$c765","peg$c768","peg$c771","peg$c777","peg$c783","peg$c786","peg$c789","peg$c792","peg$c795","peg$c801","peg$c810","peg$c813","peg$c834","peg$c841","peg$c846","peg$c849","peg$c855","peg$c861","peg$c870","peg$c873","peg$c876","peg$c879","peg$c882","peg$c886","peg$c889","peg$c892","peg$c895","peg$c898","peg$c901","peg$c905","peg$c909","peg$c912","peg$c915","peg$c918","peg$c920","peg$c922","peg$c924","peg$c926","peg$c928","peg$c930","peg$c932","peg$c934","peg$c936","peg$c937","peg$c938","peg$c939","peg$c943","peg$c946","peg$c947","peg$c948","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsestmt","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parsequery_statement","s9","s11","s13","s15","peg$parseKW_UPDATE","peg$parsetable_ref_list","peg$parseKW_SET","peg$parseset_list","peg$parsefrom_clause","peg$parsewhere_clause","f","w","or","lc","peg$parseupdate_stmt","s17","peg$parsereplace_insert","peg$parseKW_INTO","peg$parsetable_name","peg$parseinsert_partition","peg$parseLPAREN","peg$parsecolumn","peg$parseCOMMA","peg$parsecolumn_list","peg$parseRPAREN","peg$parseinsert_value_clause","peg$parseon_duplicate_update_stmt","ri","v","odp","row","idx","peg$c4","peg$parsereplace_insert_stmt","peg$parseKW_IGNORE","ig","it","peg$c5","peg$parseinsert_no_columns_stmt","peg$parseinsert_into_set","substr","peg$parseident_start","peg$parseKW_DELETE","tt","peg$c3","peg$parsedelete_stmt","peg$parseKW_ANALYZE","peg$parseanalyze_stmt","peg$parseKW_ATTACH","peg$parseKW_DATABASE","peg$parseexpr","peg$parseKW_AS","peg$parseident","e","peg$parseattach_stmt","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","peg$c32","peg$parsedrop_stmt","s14","s19","s21","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","s8","peg$parsecreate_definition","peg$parsecreate_table_definition","peg$parsecreate_constraint_definition","peg$parsetable_option","peg$parsetable_options","peg$parseKW_REPLACE","tp","ife","con","to","ir","qe","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","lt","peg$c69","peg$parsecreate_table_stmt","peg$parseKW_SCHEMA","peg$parseident_name","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","kw","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parseproc_func_call","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parseKW_TABLES","peg$parselock_table","peg$parselock_table_list","ltl","peg$parselock_stmt","peg$parseKW_UNLOCK","peg$parseunlock_stmt","peg$parseKW_SHOW","peg$parsein_op_right","ins","in","peg$parselike_op_right","k","peg$c58","peg$parseKW_VAR__PRE_AT","peg$parseKW_USING","peg$parseshow_grant_for_using_list","peg$parseshow_grant_for_using","u","h","peg$parseshow_grant_for","for","peg$parseshow_grant_stmt","peg$parseshow_stmt","peg$parseKW_DESC","peg$parseKW_DESCRIBE","peg$parsedesc_stmt","peg$parsecmd_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parsecrud_stmt","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsevar_decl","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","peg$parseKW_ASSIGIN_EQUAL","peg$parsejoin_op","peg$parseon_clause","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseLBRAKE","peg$parseproc_primary_list","peg$parseRBRAKE","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseadditive_operator","peg$parseproc_primary","peg$parsemultiplicative_operator","peg$parseliteral","peg$parseparam","peg$parseproc_func_name","peg$c15","peg$parseset_item","tbl","peg$parseDOT","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c21","peg$parseKW_INSERT","s10","peg$parseKW_PARTITION","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","peg$parseselect_stmt_nake","peg$parseKW_KEY","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseKW_VAR_PRE","peg$c78","peg$parsemem_chain","peg$parseexpr_list","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parsecreate_column_definition","peg$parseindex_type","peg$parsecte_column_definition","peg$parseindex_options","id","peg$parsecreate_index_definition","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","kc","peg$parsecreate_fulltext_spatial_index_definition","s12","df","co","cf","re","peg$parsedata_type","peg$parseKW_NOT_NULL","peg$parseliteral_not_null","peg$parseliteral_null","peg$parseKW_DEFAULT","peg$parsedefault_expr","peg$parsekeyword_comment","peg$parseKW_COLLATE","peg$parsecollate_expr","peg$parsecolumn_format","peg$parsestorage","peg$parsereference_definition","peg$parsetable_base","peg$parselock_type","peg$parseconstraint_name","de","peg$parsecreate_constraint_primary","peg$parseKW_UNIQUE","peg$parsecreate_constraint_unique","peg$parsecreate_constraint_foreign","nfr","peg$parsecreate_constraint_check","peg$parseKW_COMMENT","peg$parseliteral_string","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","peg$parseliteral_numeric","peg$c153","peg$c162","peg$c165","peg$parsecreate_option_character_set_kw","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseKW_TO","tn","peg$parseALTER_RENAME_TABLE","peg$parseindex_option","peg$c200","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c211","ro","peg$parse___","peg$parsereference_option","peg$parseKW_CONSTRAINT","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","peg$c282","peg$parseunion_stmt_nake","peg$c284","peg$parseKW_WITH","peg$parsecte_definition","s16","s18","s20","s22","s24","s26","s28","sv","fs","g","q","win","peg$parseKW_SELECT","peg$parseKW_STRUCT","peg$parseKW_VALUE","peg$parsestruct_value","peg$parsecolumn_clause","peg$parsefor_sys_time_as_of","peg$parseKW_GROUP","peg$parseKW_BY","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parseor_and_where_expr","peg$parsehaving_clause","peg$parseKW_QUALIFY","peg$parsequalify_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","peg$parseexpr_alias","peg$parseKW_AND","peg$parseKW_OR","peg$parseLOGIC_OPERATOR","peg$c383","peg$parsebinary_column_expr","peg$parsealias_clause","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseKW_SAFE_OFFSET","peg$parseKW_SAFE_ORDINAL","peg$parsecolumn_without_kw","pro","mid","peg$c302","reservedMap","peg$c432","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","peg$parsewith_offset","peg$parseKW_FROM","peg$parseKW_PIVOT","peg$parseaggr_func","el","peg$c457","peg$parseaggr_func_list","peg$parsepivot_operator","peg$parsetable_ref","peg$c315","peg$c316","peg$parsetable_join","peg$parsetablesample","peg$parsenumber","charAt","peg$parsehint","ts","peg$c336","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c341","peg$parseident_without_kw","obj","catalog","peg$c342","peg$c343","peg$parseKW_WHERE","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_ASC","peg$c374","peg$parsenumber_or_param","peg$parseKW_LIMIT","i1","peg$c375","peg$c376","peg$parsestruct_expr","peg$parseprimary","peg$parsecomparison_op_right","rh","logicExpr","peg$c381","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","createUnaryExpr","peg$parseunary_expr","peg$parsearray_expr","peg$parseparentheses_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral_list","peg$c378","peg$parseparentheses_list_expr","peg$c379","peg$parsestruct_type","peg$c384","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseexists_op","peg$parseexists_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c405","peg$parseis_op_right","peg$parsein_op","peg$parseKW_IN","peg$parselike_op","peg$c409","peg$parsemultiplicative_expr","list","peg$parseKW_CAST","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c526","peg$c527","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c528","peg$parsecast_expr","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c524","peg$parseextract_func","peg$parseover_partition","bc","peg$parsescalar_time_func","peg$parseKW_SESSION_USER","peg$parsescalar_func","peg$c469","peg$parseon_update_current_timestamp","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c424","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parseKW_ELSE","peg$c427","peg$c429","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_name","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","peg$c466","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseKW_CURRENT_TIMESTAMP","peg$c460","peg$parseKW_OVER","peg$c471","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$parseKW_NULL","peg$c536","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c588","exp","peg$c589","peg$c590","peg$parsedigits","peg$parsedigit","digit","peg$c592","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c942","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  let { prefix } = literal\n  const { type, parentheses, suffix, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'natural_string':\n      str = `N'${escape(value)}'`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `${prefix || ':'}${value}`\n      prefix = null\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL, fulltextSearchToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter           : alterExprToSQL,\n  aggr_func       : aggrToSQL,\n  window_func     : windowFuncToSQL,\n  'array'         : arrayStructExprToSQL,\n  assign          : assignToSQL,\n  binary_expr     : binaryToSQL,\n  case            : caseToSQL,\n  cast            : castToSQL,\n  column_ref      : columnRefToSQL,\n  datatype        : dataTypeToSQL,\n  extract         : extractFunToSQL,\n  fulltext_search : fulltextSearchToSQL,\n  function        : funcToSQL,\n  insert          : unionToSQL,\n  interval        : intervalToSQL,\n  show            : showToSQL,\n  struct          : arrayStructExprToSQL,\n  'window'        : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, quoted, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return [quoted, val.join(' '), quoted].filter(hasVal).join('')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type, toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (args.separator) str = [str, toUpper(args.separator.keyword), literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, tablesample, table_hint } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  if (table_hint) result.push(`${toUpper(table_hint.keyword)}`, `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, isDual, schema, table, parentheses, properties,\n    suffix, order_by,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  result.push(toUpper(order_by))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fulltextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fulltextSearchToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter      : alterToSQL,\n  analyze    : analyzeToSQL,\n  attach     : attachToSQL,\n  create     : createToSQL,\n  select     : selectToSQL,\n  deallocate : deallocateToSQL,\n  delete     : deleteToSQL,\n  exec       : execToSQL,\n  update     : updateToSQL,\n  insert     : insertToSQL,\n  drop       : commonCmdToSQL,\n  truncate   : commonCmdToSQL,\n  replace    : insertToSQL,\n  declare    : declareToSQL,\n  use        : useToSQL,\n  rename     : renameToSQL,\n  call       : callToSQL,\n  desc       : descToSQL,\n  set        : setVarToSQL,\n  lock       : lockUnlockToSQL,\n  unlock     : lockUnlockToSQL,\n  show       : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\ntypeToSQLFn.bigquery = bigQueryToSQL\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, quoted, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  const result = [prefix, symbolChar, quoted, dataType, quoted, arrayDimension, str, suffix]\n  return result.filter(hasVal).join('')\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL, varToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  let { keyword } = showExpr\n  const { suffix } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr.view)\n      break\n    case 'VAR':\n      str = varToSQL(showExpr.var)\n      keyword = ''\n      break\n    default:\n      break\n  }\n  return ['SHOW', toUpper(keyword), toUpper(suffix), str].filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = function(t, l, f, w, or, lc) {\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'update'\n              tableList.add(`${action}::${db}::${table}`)\n            });\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`update::${info.db}::${info.table}`);\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                orderby: or,\n                limit: lc,\n              }\n            };\n          },\n      peg$c3 = function(t, f, w, or, l) {\n            if(t) t.forEach(tt => tableList.add(`delete::${tt.db}::${tt.table}`));\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w,\n                orderby: or,\n                limit: l,\n              }\n            };\n          },\n      peg$c4 = function(ri, t, p, c, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c5 = function(ri, ig, it, t, p, v, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c6 = function(ri, t, p, l, odp) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                partition: p,\n                set: l,\n                on_duplicate_update: odp,\n              }\n            };\n          },\n      peg$c7 = function() { varList = []; return true; },\n      peg$c8 = function(s) {\n            return { stmt: s, vars: varList };\n          },\n      peg$c9 = function(va, s, e) {\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c10 = function(e) {\n            return { type: 'return', expr: e };\n          },\n      peg$c11 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c12 = function(lt, op, rt, expr) {\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c13 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c14 = function(name, l) {\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c15 = function(name) {\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c16 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c17 = function(l) {\n          return { type: 'array', value: l };\n        },\n      peg$c18 = \"=\",\n      peg$c19 = peg$literalExpectation(\"=\", false),\n      peg$c20 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0] };\n        },\n      peg$c21 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c22 = function() { return 'insert'; },\n      peg$c23 = function() { return 'replace'; },\n      peg$c24 = function(head, tail) {\n            return createList(head, tail)\n          },\n      peg$c25 = function(v) {\n          return v\n        },\n      peg$c26 = \"duplicate\",\n      peg$c27 = peg$literalExpectation(\"DUPLICATE\", true),\n      peg$c28 = function(s) {\n          return {\n            keyword: 'on duplicate key update',\n            set: s\n          }\n        },\n      peg$c29 = function(a, t) {\n            tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                table: t\n              }\n            };\n          },\n      peg$c30 = function(a, db, e, as, schema) {\n            // tableList.add(`${a}::${t.db}::${t.table}`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                database: db,\n                expr: e,\n                as: as && as[0].toLowerCase(),\n                schema,\n              }\n            };\n          },\n      peg$c31 = function(a, r, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c32 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c33 = function(a, kw, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c34 = function(t) {\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c35 = function(e) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c36 = function(d) {\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c37 = function(kw, a) {\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c38 = function(ltl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: 'tables',\n              tables: ltl\n            }\n          }\n        },\n      peg$c39 = function() {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'unlock',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c40 = \"binary\",\n      peg$c41 = peg$literalExpectation(\"BINARY\", true),\n      peg$c42 = \"master\",\n      peg$c43 = peg$literalExpectation(\"MASTER\", true),\n      peg$c44 = \"logs\",\n      peg$c45 = peg$literalExpectation(\"LOGS\", true),\n      peg$c46 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'logs',\n              keyword: t.toLowerCase()\n            }\n          }\n        },\n      peg$c47 = \"binlog\",\n      peg$c48 = peg$literalExpectation(\"BINLOG\", true),\n      peg$c49 = \"events\",\n      peg$c50 = peg$literalExpectation(\"EVENTS\", true),\n      peg$c51 = function(ins, from, limit) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: 'events',\n              keyword: 'binlog',\n              in: ins,\n              from,\n              limit,\n            }\n          }\n        },\n      peg$c52 = \"character\",\n      peg$c53 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c54 = \"set\",\n      peg$c55 = peg$literalExpectation(\"SET\", true),\n      peg$c56 = \"collation\",\n      peg$c57 = peg$literalExpectation(\"COLLATION\", true),\n      peg$c58 = function(k, e) {\n          let keyword = Array.isArray(k) && k || [k]\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              suffix: keyword[2] && keyword[2].toLowerCase(),\n              keyword: keyword[0].toLowerCase(),\n              expr: e\n            }\n          }\n        },\n      peg$c59 = function(t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'desc',\n              table: t\n            }\n          };\n        },\n      peg$c60 = function(p, d) {\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c61 = function(name, m) {\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c62 = function(l) {\n            return l;\n          },\n      peg$c63 = function(l) { return l; },\n      peg$c64 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c65 = \"if\",\n      peg$c66 = peg$literalExpectation(\"IF\", true),\n      peg$c67 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c68 = function(a, tp, ife, t, c, con, to, ir, as, qe) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n      \t\t      constraint : con,\n                table_options: to\n              }\n            }\n          },\n      peg$c69 = function(a, tp, ife, t, lt) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists:ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c70 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists:ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c71 = function(t, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c72 = function(head, tail) {\n          return createList(head, tail);\n        },\n      peg$c73 = \"grants\",\n      peg$c74 = peg$literalExpectation(\"GRANTS\", true),\n      peg$c75 = function(f) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              keyword: 'grants',\n              for: f,\n            }\n          }\n        },\n      peg$c76 = \".\",\n      peg$c77 = peg$literalExpectation(\".\", false),\n      peg$c78 = function(l) {\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c79 = \"algorithm\",\n      peg$c80 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c81 = \"default\",\n      peg$c82 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c83 = \"instant\",\n      peg$c84 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c85 = \"inplace\",\n      peg$c86 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c87 = \"copy\",\n      peg$c88 = peg$literalExpectation(\"COPY\", true),\n      peg$c89 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c90 = \"lock\",\n      peg$c91 = peg$literalExpectation(\"LOCK\", true),\n      peg$c92 = \"none\",\n      peg$c93 = peg$literalExpectation(\"NONE\", true),\n      peg$c94 = \"shared\",\n      peg$c95 = peg$literalExpectation(\"SHARED\", true),\n      peg$c96 = \"exclusive\",\n      peg$c97 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c98 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c99 = \"auto_increment\",\n      peg$c100 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c101 = \"unique\",\n      peg$c102 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c103 = \"primary\",\n      peg$c104 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c105 = \"key\",\n      peg$c106 = peg$literalExpectation(\"KEY\", true),\n      peg$c107 = function(c, d, n, df, a, u, co, ca, cf, s, re) {\n            columnList.add(`create::${c.table}::${c.column}`)\n            if (n && !n.value) n.value = 'null'\n            return {\n              column: c,\n              definition: d,\n              nullable: n,\n              default_val: df,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: u && `${u[0].toLowerCase()} ${u[2].toLowerCase()}`,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c108 = function(head, tail) {\n          return createList(head, tail)\n        },\n      peg$c109 = function(e) {\n            e.parentheses = true;\n            return e;\n        },\n      peg$c110 = function(t, lt) {\n          tableList.add(`lock::${t.db}::${t.table}`)\n          return {\n            table: t,\n            lock_type: lt\n          }\n        },\n      peg$c111 = \"for\",\n      peg$c112 = peg$literalExpectation(\"FOR\", true),\n      peg$c113 = function(n, h, u) {\n          return {\n            user: n,\n            host: h && h[2],\n            role_list: u\n          }\n        },\n      peg$c114 = function(kc, c, t, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c115 = function(p, kc, c, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c116 = function(ce) {\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c117 = function(k, s, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c118 = function(s, ca) {\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c119 = \"column_format\",\n      peg$c120 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c121 = \"fixed\",\n      peg$c122 = peg$literalExpectation(\"FIXED\", true),\n      peg$c123 = \"dynamic\",\n      peg$c124 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c125 = function(k, f) {\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c126 = \"storage\",\n      peg$c127 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c128 = \"disk\",\n      peg$c129 = peg$literalExpectation(\"DISK\", true),\n      peg$c130 = \"memory\",\n      peg$c131 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c132 = function(k, s) {\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c133 = \"match full\",\n      peg$c134 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c135 = \"match partial\",\n      peg$c136 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c137 = \"match simple\",\n      peg$c138 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c139 = function(kc, t, de, m, od, ou) {\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c140 = \"avg_row_length\",\n      peg$c141 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c142 = \"key_block_size\",\n      peg$c143 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c144 = \"max_rows\",\n      peg$c145 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c146 = \"min_rows\",\n      peg$c147 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c148 = \"stats_sample_pages\",\n      peg$c149 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c150 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c151 = \"connection\",\n      peg$c152 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c153 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c154 = \"compression\",\n      peg$c155 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c156 = \"'\",\n      peg$c157 = peg$literalExpectation(\"'\", false),\n      peg$c158 = \"zlib\",\n      peg$c159 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c160 = \"lz4\",\n      peg$c161 = peg$literalExpectation(\"LZ4\", true),\n      peg$c162 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c163 = \"engine\",\n      peg$c164 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c165 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c166 = function(t) {\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c167 = \"charset\",\n      peg$c168 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c169 = \"collate\",\n      peg$c170 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c171 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c172 = \"read\",\n      peg$c173 = peg$literalExpectation(\"READ\", true),\n      peg$c174 = \"local\",\n      peg$c175 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c176 = function(s) {\n          return {\n            type: 'read',\n            suffix: s && 'local'\n          }\n        },\n      peg$c177 = \"low_priority\",\n      peg$c178 = peg$literalExpectation(\"LOW_PRIORITY\", true),\n      peg$c179 = \"write\",\n      peg$c180 = peg$literalExpectation(\"WRITE\", true),\n      peg$c181 = function(p) {\n          return {\n            type: 'write',\n            prefix: p && 'low_priority'\n          }\n        },\n      peg$c182 = function(l) {\n          return l\n        },\n      peg$c183 = function(kc, p, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: `${p[0].toLowerCase()} ${p[2].toLowerCase()}`,\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c184 = function(kc, u, p, i, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c185 = \"foreign key\",\n      peg$c186 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c187 = function(kc, p, i, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c188 = \"check\",\n      peg$c189 = peg$literalExpectation(\"CHECK\", true),\n      peg$c190 = \"not\",\n      peg$c191 = peg$literalExpectation(\"NOT\", true),\n      peg$c192 = \"replication\",\n      peg$c193 = peg$literalExpectation(\"REPLICATION\", true),\n      peg$c194 = function(kc, u, nfr, c) {\n          return {\n              constraint_type: u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              constraint: kc && kc.constraint,\n              index_type: nfr && { keyword: 'not for replication' },\n              definition: [c],\n              resource: 'constraint',\n            }\n        },\n      peg$c195 = \"btree\",\n      peg$c196 = peg$literalExpectation(\"BTREE\", true),\n      peg$c197 = \"hash\",\n      peg$c198 = peg$literalExpectation(\"HASH\", true),\n      peg$c199 = function(t) {\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c200 = function(head, tail) {\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c201 = function(k, e, kbs) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          };\n        },\n      peg$c202 = \"with\",\n      peg$c203 = peg$literalExpectation(\"WITH\", true),\n      peg$c204 = \"parser\",\n      peg$c205 = peg$literalExpectation(\"PARSER\", true),\n      peg$c206 = function(pn) {\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c207 = \"visible\",\n      peg$c208 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c209 = \"invisible\",\n      peg$c210 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c211 = function(k) {\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c212 = \"on\",\n      peg$c213 = peg$literalExpectation(\"ON\", true),\n      peg$c214 = \"delete\",\n      peg$c215 = peg$literalExpectation(\"DELETE\", true),\n      peg$c216 = \"update\",\n      peg$c217 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c218 = function(on_kw, kw, ro) {\n          return {\n            type: `${on_kw.toLowerCase()} ${kw.toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c219 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c220 = function(kc, cd) {\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c221 = function(kc, c) {\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c222 = function(kw, tn) {\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c223 = function(kc, c) {\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c224 = \"restrict\",\n      peg$c225 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c226 = \"cascade\",\n      peg$c227 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c228 = \"set null\",\n      peg$c229 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c230 = \"no action\",\n      peg$c231 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c232 = \"set default\",\n      peg$c233 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c234 = function(kc) {\n          return kc.toLowerCase()\n        },\n      peg$c235 = \"create\",\n      peg$c236 = peg$literalExpectation(\"CREATE\", true),\n      peg$c237 = \"insert\",\n      peg$c238 = peg$literalExpectation(\"INSERT\", true),\n      peg$c239 = \":=\",\n      peg$c240 = peg$literalExpectation(\":=\", false),\n      peg$c241 = \"return\",\n      peg$c242 = peg$literalExpectation(\"return\", true),\n      peg$c243 = \"replace\",\n      peg$c244 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c245 = \"analyze\",\n      peg$c246 = peg$literalExpectation(\"ANALYZE\", true),\n      peg$c247 = \"attach\",\n      peg$c248 = peg$literalExpectation(\"ATTACH\", true),\n      peg$c249 = \"database\",\n      peg$c250 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c251 = \"rename\",\n      peg$c252 = peg$literalExpectation(\"RENAME\", true),\n      peg$c253 = \"show\",\n      peg$c254 = peg$literalExpectation(\"SHOW\", true),\n      peg$c255 = \"describe\",\n      peg$c256 = peg$literalExpectation(\"DESCRIBE\", true),\n      peg$c257 = \"@\",\n      peg$c258 = peg$literalExpectation(\"@\", false),\n      peg$c259 = \"@@\",\n      peg$c260 = peg$literalExpectation(\"@@\", false),\n      peg$c261 = \"$\",\n      peg$c262 = peg$literalExpectation(\"$\", false),\n      peg$c263 = \"temporary\",\n      peg$c264 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c265 = \"schema\",\n      peg$c266 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c267 = \"alter\",\n      peg$c268 = peg$literalExpectation(\"ALTER\", true),\n      peg$c269 = \"spatial\",\n      peg$c270 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c271 = \"(\",\n      peg$c272 = peg$literalExpectation(\"(\", false),\n      peg$c273 = \")\",\n      peg$c274 = peg$literalExpectation(\")\", false),\n      peg$c275 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c276 = function(cte, s, o, l) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c277 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c278 = \"intersect\",\n      peg$c279 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c280 = \"except\",\n      peg$c281 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c282 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c283 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c284 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c285 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c286 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c287 = function(cte, sv, d, c, f, fs, w, g, h, q, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                qualify: q,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c288 = \"system_time\",\n      peg$c289 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c290 = \"as\",\n      peg$c291 = peg$literalExpectation(\"AS\", true),\n      peg$c292 = \"of\",\n      peg$c293 = peg$literalExpectation(\"OF\", true),\n      peg$c294 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c295 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c296 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c297 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c298 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c299 = function(c) {\n          return c\n        },\n      peg$c300 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c301 = function(tbl) {\n            columnList.add('select::null::(.*)');\n            return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c302 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c303 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c304 = function(i) { return i; },\n      peg$c305 = \"unnest\",\n      peg$c306 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c307 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c308 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c309 = function(a, c, i, as) {\n          i.operator = '='\n          return {\n            'type': 'pivot',\n            'expr': a,\n            column: c,\n            in_expr: i,\n            as,\n          }\n        },\n      peg$c310 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c311 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c312 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c313 = function(t) { return t; },\n      peg$c314 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c315 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c316 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c317 = /^[@]/,\n      peg$c318 = peg$classExpectation([\"@\"], false, false),\n      peg$c319 = /^[{]/,\n      peg$c320 = peg$classExpectation([\"{\"], false, false),\n      peg$c321 = /^[=]/,\n      peg$c322 = peg$classExpectation([\"=\"], false, false),\n      peg$c323 = /^[}]/,\n      peg$c324 = peg$classExpectation([\"}\"], false, false),\n      peg$c325 = \"tablesample\",\n      peg$c326 = peg$literalExpectation(\"TABLESAMPLE\", true),\n      peg$c327 = \"bernoulli\",\n      peg$c328 = peg$literalExpectation(\"BERNOULLI\", true),\n      peg$c329 = \"reservoir\",\n      peg$c330 = peg$literalExpectation(\"RESERVOIR\", true),\n      peg$c331 = \"percent\",\n      peg$c332 = peg$literalExpectation(\"PERCENT\", true),\n      peg$c333 = \"rows\",\n      peg$c334 = peg$literalExpectation(\"ROWS\", true),\n      peg$c335 = function(t, ht, ts, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            }\n            return {\n              ...t,\n              as: alias\n            };\n          },\n      peg$c336 = function(stmt, ts, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c337 = function() { return 'LEFT JOIN'; },\n      peg$c338 = function() { return 'RIGHT JOIN'; },\n      peg$c339 = function() { return 'FULL JOIN'; },\n      peg$c340 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c341 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c342 = function(db, schema, tail) {\n            const obj = { db: null, table: db };\n            if (tail !== null) {\n              obj.db = db;\n              obj.catalog = db;\n              obj.schema = schema[3];\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c343 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c344 = function(e) { return e; },\n      peg$c345 = function(e) { return e.value; },\n      peg$c346 = function(e) { return e },\n      peg$c347 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c348 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c349 = function(n) { return n },\n      peg$c350 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c351 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c352 = \"range\",\n      peg$c353 = peg$literalExpectation(\"RANGE\", true),\n      peg$c354 = \"unbounded\",\n      peg$c355 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c356 = \"preceding\",\n      peg$c357 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c358 = \"current\",\n      peg$c359 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c360 = \"ROW\",\n      peg$c361 = peg$literalExpectation(\"ROW\", false),\n      peg$c362 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c363 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c364 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c365 = \"following\",\n      peg$c366 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c367 = function(s, c) {\n          // => string\n          s.value += ` ${c.toUpperCase()}`\n          return s\n        },\n      peg$c368 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c369 = \"row\",\n      peg$c370 = peg$literalExpectation(\"ROW\", true),\n      peg$c371 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c372 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c373 = function(bc) { return bc; },\n      peg$c374 = function(e, c, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c375 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c376 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c377 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c378 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c379 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c380 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c381 = function(head, tail, rh) {\n          const logicExpr = createBinaryExprChain(head, tail)\n          if (rh === null) return logicExpr\n          else if (rh.type === 'arithmetic') return createBinaryExprChain(logicExpr, rh.tail)\n          else return createBinaryExpr(rh.op, logicExpr, rh.right)\n        },\n      peg$c382 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c383 = function(head, tail) {\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c384 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c385 = \"!\",\n      peg$c386 = peg$literalExpectation(\"!\", false),\n      peg$c387 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c388 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c389 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c390 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c391 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c392 = \">=\",\n      peg$c393 = peg$literalExpectation(\">=\", false),\n      peg$c394 = \">\",\n      peg$c395 = peg$literalExpectation(\">\", false),\n      peg$c396 = \"<=\",\n      peg$c397 = peg$literalExpectation(\"<=\", false),\n      peg$c398 = \"<>\",\n      peg$c399 = peg$literalExpectation(\"<>\", false),\n      peg$c400 = \"<\",\n      peg$c401 = peg$literalExpectation(\"<\", false),\n      peg$c402 = \"!=\",\n      peg$c403 = peg$literalExpectation(\"!=\", false),\n      peg$c404 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c405 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c406 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c407 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c408 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c409 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c410 = \"+\",\n      peg$c411 = peg$literalExpectation(\"+\", false),\n      peg$c412 = \"-\",\n      peg$c413 = peg$literalExpectation(\"-\", false),\n      peg$c414 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c415 = \"*\",\n      peg$c416 = peg$literalExpectation(\"*\", false),\n      peg$c417 = \"/\",\n      peg$c418 = peg$literalExpectation(\"/\", false),\n      peg$c419 = \"%\",\n      peg$c420 = peg$literalExpectation(\"%\", false),\n      peg$c421 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c422 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c423 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c424 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c425 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c426 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c427 = function(schema, tbl, col) {\n            const columns = col.map(c => c[3]).join('.') || null\n            columnList.add(`select::${schema}.${tbl[3]}::${col[0][3]}`);\n            return {\n              type: 'column_ref',\n              schema: schema,\n              table: tbl[3],\n              column: columns\n            };\n          },\n      peg$c428 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c429 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c430 = function(name) { return reservedMap[`${name}`.toUpperCase()] === true; },\n      peg$c431 = function(name) {\n            return name;\n          },\n      peg$c432 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c433 = \"\\\"\",\n      peg$c434 = peg$literalExpectation(\"\\\"\", false),\n      peg$c435 = /^[^\"]/,\n      peg$c436 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c437 = function(chars) { return chars.join(''); },\n      peg$c438 = /^[^']/,\n      peg$c439 = peg$classExpectation([\"'\"], true, false),\n      peg$c440 = \"`\",\n      peg$c441 = peg$literalExpectation(\"`\", false),\n      peg$c442 = /^[^`]/,\n      peg$c443 = peg$classExpectation([\"`\"], true, false),\n      peg$c444 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c445 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c446 = function(name) { return name; },\n      peg$c447 = function(start, parts) { return start + parts.join(''); },\n      peg$c448 = /^[A-Za-z_]/,\n      peg$c449 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c450 = /^[A-Za-z0-9_\\-]/,\n      peg$c451 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c452 = /^[A-Za-z0-9_:\\-]/,\n      peg$c453 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\", \"-\"], false, false),\n      peg$c454 = \":\",\n      peg$c455 = peg$literalExpectation(\":\", false),\n      peg$c456 = function(s, n) {\n            return { type: 'param', value: n, prefix: s };\n          },\n      peg$c457 = function(head, as, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n        },\n      peg$c458 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc,\n            };\n          },\n      peg$c459 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c460 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c461 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c462 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c463 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c464 = function(e) { return { expr: e }; },\n      peg$c465 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c466 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: false }; },\n      peg$c467 = function() { return { type: 'star', value: '*' }; },\n      peg$c468 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c469 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c470 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c471 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              tail.forEach(t => name = `${name}.${t[3]}`)\n            }\n            return name;\n          },\n      peg$c472 = \"century\",\n      peg$c473 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c474 = \"day\",\n      peg$c475 = peg$literalExpectation(\"DAY\", true),\n      peg$c476 = \"date\",\n      peg$c477 = peg$literalExpectation(\"DATE\", true),\n      peg$c478 = \"decade\",\n      peg$c479 = peg$literalExpectation(\"DECADE\", true),\n      peg$c480 = \"dow\",\n      peg$c481 = peg$literalExpectation(\"DOW\", true),\n      peg$c482 = \"doy\",\n      peg$c483 = peg$literalExpectation(\"DOY\", true),\n      peg$c484 = \"epoch\",\n      peg$c485 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c486 = \"hour\",\n      peg$c487 = peg$literalExpectation(\"HOUR\", true),\n      peg$c488 = \"isodow\",\n      peg$c489 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c490 = \"isoweek\",\n      peg$c491 = peg$literalExpectation(\"ISOWEEK\", true),\n      peg$c492 = \"isoyear\",\n      peg$c493 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c494 = \"microseconds\",\n      peg$c495 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c496 = \"millennium\",\n      peg$c497 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c498 = \"milliseconds\",\n      peg$c499 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c500 = \"minute\",\n      peg$c501 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c502 = \"month\",\n      peg$c503 = peg$literalExpectation(\"MONTH\", true),\n      peg$c504 = \"quarter\",\n      peg$c505 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c506 = \"second\",\n      peg$c507 = peg$literalExpectation(\"SECOND\", true),\n      peg$c508 = \"time\",\n      peg$c509 = peg$literalExpectation(\"TIME\", true),\n      peg$c510 = \"timezone\",\n      peg$c511 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c512 = \"timezone_hour\",\n      peg$c513 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c514 = \"timezone_minute\",\n      peg$c515 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c516 = \"week\",\n      peg$c517 = peg$literalExpectation(\"WEEK\", true),\n      peg$c518 = \"year\",\n      peg$c519 = peg$literalExpectation(\"YEAR\", true),\n      peg$c520 = function(f) {\n          return f\n        },\n      peg$c521 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c522 = \"date_trunc\",\n      peg$c523 = peg$literalExpectation(\"DATE_TRUNC\", true),\n      peg$c524 = function(e, f) {\n          return {\n              type: 'function',\n              name: 'DATE_TRUNC',\n              args: { type: 'expr_list', value: [e, { type: 'origin', value: f }] },\n              over: null,\n            };\n        },\n      peg$c525 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c526 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c527 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c528 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c529 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c530 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c531 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c532 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c533 = \"r\",\n      peg$c534 = peg$literalExpectation(\"R\", true),\n      peg$c535 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c536 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c537 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c538 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c539 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c540 = /^[^'\\\\]/,\n      peg$c541 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c542 = \"\\\\'\",\n      peg$c543 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c544 = function() { return \"\\\\'\";  },\n      peg$c545 = \"\\\\\\\"\",\n      peg$c546 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c547 = function() { return '\\\\\"';  },\n      peg$c548 = \"\\\\\\\\\",\n      peg$c549 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c550 = function() { return \"\\\\\\\\\"; },\n      peg$c551 = \"\\\\/\",\n      peg$c552 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c553 = function() { return \"\\\\/\";  },\n      peg$c554 = \"\\\\b\",\n      peg$c555 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c556 = function() { return \"\\b\"; },\n      peg$c557 = \"\\\\f\",\n      peg$c558 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c559 = function() { return \"\\f\"; },\n      peg$c560 = \"\\\\n\",\n      peg$c561 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c562 = function() { return \"\\n\"; },\n      peg$c563 = \"\\\\r\",\n      peg$c564 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c565 = function() { return \"\\r\"; },\n      peg$c566 = \"\\\\t\",\n      peg$c567 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c568 = function() { return \"\\t\"; },\n      peg$c569 = \"\\\\u\",\n      peg$c570 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c571 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c572 = \"\\\\\",\n      peg$c573 = peg$literalExpectation(\"\\\\\", false),\n      peg$c574 = function() { return \"\\\\\"; },\n      peg$c575 = \"''\",\n      peg$c576 = peg$literalExpectation(\"''\", false),\n      peg$c577 = function() { return \"''\" },\n      peg$c578 = \"\\\"\\\"\",\n      peg$c579 = peg$literalExpectation(\"\\\"\\\"\", false),\n      peg$c580 = function() { return '\"\"' },\n      peg$c581 = \"``\",\n      peg$c582 = peg$literalExpectation(\"``\", false),\n      peg$c583 = function() { return '``' },\n      peg$c584 = /^[\\n\\r]/,\n      peg$c585 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c586 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c587 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c588 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c589 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c590 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c591 = function(op, digits) { return op + digits; },\n      peg$c592 = function(op, digit) { return op + digit; },\n      peg$c593 = function(digits) { return \".\" + digits; },\n      peg$c594 = function(e, digits) { return e + digits; },\n      peg$c595 = function(digits) { return digits.join(\"\"); },\n      peg$c596 = /^[0-9]/,\n      peg$c597 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c598 = /^[0-9a-fA-F]/,\n      peg$c599 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c600 = /^[eE]/,\n      peg$c601 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c602 = /^[+\\-]/,\n      peg$c603 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c604 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c605 = \"null\",\n      peg$c606 = peg$literalExpectation(\"NULL\", true),\n      peg$c607 = \"not null\",\n      peg$c608 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c609 = \"true\",\n      peg$c610 = peg$literalExpectation(\"TRUE\", true),\n      peg$c611 = \"to\",\n      peg$c612 = peg$literalExpectation(\"TO\", true),\n      peg$c613 = \"false\",\n      peg$c614 = peg$literalExpectation(\"FALSE\", true),\n      peg$c615 = \"drop\",\n      peg$c616 = peg$literalExpectation(\"DROP\", true),\n      peg$c617 = function() { return 'DROP'; },\n      peg$c618 = \"use\",\n      peg$c619 = peg$literalExpectation(\"USE\", true),\n      peg$c620 = \"select\",\n      peg$c621 = peg$literalExpectation(\"SELECT\", true),\n      peg$c622 = \"RECURSIVE\",\n      peg$c623 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c624 = \"ignore\",\n      peg$c625 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c626 = \"explain\",\n      peg$c627 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c628 = \"partition\",\n      peg$c629 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c630 = function() { return 'PARTITION' },\n      peg$c631 = \"into\",\n      peg$c632 = peg$literalExpectation(\"INTO\", true),\n      peg$c633 = \"from\",\n      peg$c634 = peg$literalExpectation(\"FROM\", true),\n      peg$c635 = \"unlock\",\n      peg$c636 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c637 = \"table\",\n      peg$c638 = peg$literalExpectation(\"TABLE\", true),\n      peg$c639 = function() { return 'TABLE'; },\n      peg$c640 = \"tables\",\n      peg$c641 = peg$literalExpectation(\"TABLES\", true),\n      peg$c642 = function() { return 'TABLES'; },\n      peg$c643 = function() { return 'COLLATE'; },\n      peg$c644 = \"left\",\n      peg$c645 = peg$literalExpectation(\"LEFT\", true),\n      peg$c646 = \"right\",\n      peg$c647 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c648 = \"full\",\n      peg$c649 = peg$literalExpectation(\"FULL\", true),\n      peg$c650 = \"inner\",\n      peg$c651 = peg$literalExpectation(\"INNER\", true),\n      peg$c652 = \"cross\",\n      peg$c653 = peg$literalExpectation(\"CROSS\", true),\n      peg$c654 = \"join\",\n      peg$c655 = peg$literalExpectation(\"JOIN\", true),\n      peg$c656 = \"outer\",\n      peg$c657 = peg$literalExpectation(\"OUTER\", true),\n      peg$c658 = \"over\",\n      peg$c659 = peg$literalExpectation(\"OVER\", true),\n      peg$c660 = \"union\",\n      peg$c661 = peg$literalExpectation(\"UNION\", true),\n      peg$c662 = \"value\",\n      peg$c663 = peg$literalExpectation(\"VALUE\", true),\n      peg$c664 = function() { return 'VALUE' },\n      peg$c665 = \"values\",\n      peg$c666 = peg$literalExpectation(\"VALUES\", true),\n      peg$c667 = \"using\",\n      peg$c668 = peg$literalExpectation(\"USING\", true),\n      peg$c669 = \"where\",\n      peg$c670 = peg$literalExpectation(\"WHERE\", true),\n      peg$c671 = \"group\",\n      peg$c672 = peg$literalExpectation(\"GROUP\", true),\n      peg$c673 = \"by\",\n      peg$c674 = peg$literalExpectation(\"BY\", true),\n      peg$c675 = \"order\",\n      peg$c676 = peg$literalExpectation(\"ORDER\", true),\n      peg$c677 = \"having\",\n      peg$c678 = peg$literalExpectation(\"HAVING\", true),\n      peg$c679 = \"qualify\",\n      peg$c680 = peg$literalExpectation(\"QUALIFY\", true),\n      peg$c681 = \"window\",\n      peg$c682 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c683 = \"ordinal\",\n      peg$c684 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c685 = function() { return 'ORDINAL' },\n      peg$c686 = \"safe_ordinal\",\n      peg$c687 = peg$literalExpectation(\"SAFE_ORDINAL\", true),\n      peg$c688 = function() { return 'SAFE_ORDINAL' },\n      peg$c689 = \"limit\",\n      peg$c690 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c691 = \"offset\",\n      peg$c692 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c693 = function() { return 'OFFSET'; },\n      peg$c694 = \"safe_offset\",\n      peg$c695 = peg$literalExpectation(\"SAFE_OFFSET\", true),\n      peg$c696 = function() { return 'SAFE_OFFSET'; },\n      peg$c697 = \"asc\",\n      peg$c698 = peg$literalExpectation(\"ASC\", true),\n      peg$c699 = function() { return 'ASC'; },\n      peg$c700 = \"desc\",\n      peg$c701 = peg$literalExpectation(\"DESC\", true),\n      peg$c702 = function() { return 'DESC'; },\n      peg$c703 = \"all\",\n      peg$c704 = peg$literalExpectation(\"ALL\", true),\n      peg$c705 = function() { return 'ALL'; },\n      peg$c706 = \"distinct\",\n      peg$c707 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c708 = function() { return 'DISTINCT';},\n      peg$c709 = \"between\",\n      peg$c710 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c711 = function() { return 'BETWEEN'; },\n      peg$c712 = \"in\",\n      peg$c713 = peg$literalExpectation(\"IN\", true),\n      peg$c714 = function() { return 'IN'; },\n      peg$c715 = \"is\",\n      peg$c716 = peg$literalExpectation(\"IS\", true),\n      peg$c717 = function() { return 'IS'; },\n      peg$c718 = \"like\",\n      peg$c719 = peg$literalExpectation(\"LIKE\", true),\n      peg$c720 = function() { return 'LIKE'; },\n      peg$c721 = \"exists\",\n      peg$c722 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c723 = function() { return 'EXISTS'; },\n      peg$c724 = function() { return 'NOT'; },\n      peg$c725 = \"and\",\n      peg$c726 = peg$literalExpectation(\"AND\", true),\n      peg$c727 = function() { return 'AND'; },\n      peg$c728 = \"or\",\n      peg$c729 = peg$literalExpectation(\"OR\", true),\n      peg$c730 = function() { return 'OR'; },\n      peg$c731 = \"count\",\n      peg$c732 = peg$literalExpectation(\"COUNT\", true),\n      peg$c733 = function() { return 'COUNT'; },\n      peg$c734 = \"max\",\n      peg$c735 = peg$literalExpectation(\"MAX\", true),\n      peg$c736 = function() { return 'MAX'; },\n      peg$c737 = \"min\",\n      peg$c738 = peg$literalExpectation(\"MIN\", true),\n      peg$c739 = function() { return 'MIN'; },\n      peg$c740 = \"sum\",\n      peg$c741 = peg$literalExpectation(\"SUM\", true),\n      peg$c742 = function() { return 'SUM'; },\n      peg$c743 = \"avg\",\n      peg$c744 = peg$literalExpectation(\"AVG\", true),\n      peg$c745 = function() { return 'AVG'; },\n      peg$c746 = \"extract\",\n      peg$c747 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c748 = function() { return 'EXTRACT'; },\n      peg$c749 = \"call\",\n      peg$c750 = peg$literalExpectation(\"CALL\", true),\n      peg$c751 = function() { return 'CALL'; },\n      peg$c752 = \"case\",\n      peg$c753 = peg$literalExpectation(\"CASE\", true),\n      peg$c754 = \"when\",\n      peg$c755 = peg$literalExpectation(\"WHEN\", true),\n      peg$c756 = \"then\",\n      peg$c757 = peg$literalExpectation(\"THEN\", true),\n      peg$c758 = \"else\",\n      peg$c759 = peg$literalExpectation(\"ELSE\", true),\n      peg$c760 = \"end\",\n      peg$c761 = peg$literalExpectation(\"END\", true),\n      peg$c762 = \"cast\",\n      peg$c763 = peg$literalExpectation(\"CAST\", true),\n      peg$c764 = \"array\",\n      peg$c765 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c766 = function() { return 'ARRAY'; },\n      peg$c767 = \"bytes\",\n      peg$c768 = peg$literalExpectation(\"BYTES\", true),\n      peg$c769 = function() { return 'BYTES'; },\n      peg$c770 = \"bool\",\n      peg$c771 = peg$literalExpectation(\"BOOL\", true),\n      peg$c772 = function() { return 'BOOL'; },\n      peg$c773 = \"char\",\n      peg$c774 = peg$literalExpectation(\"CHAR\", true),\n      peg$c775 = function() { return 'CHAR'; },\n      peg$c776 = \"geography\",\n      peg$c777 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c778 = function() { return 'GEOGRAPHY'; },\n      peg$c779 = \"varchar\",\n      peg$c780 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c781 = function() { return 'VARCHAR';},\n      peg$c782 = \"numeric\",\n      peg$c783 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c784 = function() { return 'NUMERIC'; },\n      peg$c785 = \"decimal\",\n      peg$c786 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c787 = function() { return 'DECIMAL'; },\n      peg$c788 = \"signed\",\n      peg$c789 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c790 = function() { return 'SIGNED'; },\n      peg$c791 = \"unsigned\",\n      peg$c792 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c793 = function() { return 'UNSIGNED'; },\n      peg$c794 = \"int64\",\n      peg$c795 = peg$literalExpectation(\"INT64\", true),\n      peg$c796 = function() { return 'INT64'; },\n      peg$c797 = \"zerofill\",\n      peg$c798 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c799 = function() { return 'ZEROFILL'; },\n      peg$c800 = \"integer\",\n      peg$c801 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c802 = function() { return 'INTEGER'; },\n      peg$c803 = \"json\",\n      peg$c804 = peg$literalExpectation(\"JSON\", true),\n      peg$c805 = function() { return 'JSON'; },\n      peg$c806 = \"smallint\",\n      peg$c807 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c808 = function() { return 'SMALLINT'; },\n      peg$c809 = \"string\",\n      peg$c810 = peg$literalExpectation(\"STRING\", true),\n      peg$c811 = function() { return 'STRING'; },\n      peg$c812 = \"struct\",\n      peg$c813 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c814 = function() { return 'STRUCT'; },\n      peg$c815 = \"tinyint\",\n      peg$c816 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c817 = function() { return 'TINYINT'; },\n      peg$c818 = \"tinytext\",\n      peg$c819 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c820 = function() { return 'TINYTEXT'; },\n      peg$c821 = \"text\",\n      peg$c822 = peg$literalExpectation(\"TEXT\", true),\n      peg$c823 = function() { return 'TEXT'; },\n      peg$c824 = \"mediumtext\",\n      peg$c825 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c826 = function() { return 'MEDIUMTEXT'; },\n      peg$c827 = \"longtext\",\n      peg$c828 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c829 = function() { return 'LONGTEXT'; },\n      peg$c830 = \"bigint\",\n      peg$c831 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c832 = function() { return 'BIGINT'; },\n      peg$c833 = \"float64\",\n      peg$c834 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c835 = function() { return 'FLOAT64'; },\n      peg$c836 = \"double\",\n      peg$c837 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c838 = function() { return 'DOUBLE'; },\n      peg$c839 = function() { return 'DATE'; },\n      peg$c840 = \"datetime\",\n      peg$c841 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c842 = function() { return 'DATETIME'; },\n      peg$c843 = function() { return 'ROWS'; },\n      peg$c844 = function() { return 'TIME'; },\n      peg$c845 = \"timestamp\",\n      peg$c846 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c847 = function() { return 'TIMESTAMP'; },\n      peg$c848 = \"truncate\",\n      peg$c849 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c850 = function() { return 'TRUNCATE'; },\n      peg$c851 = \"user\",\n      peg$c852 = peg$literalExpectation(\"USER\", true),\n      peg$c853 = function() { return 'USER'; },\n      peg$c854 = \"current_date\",\n      peg$c855 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c856 = function() { return 'CURRENT_DATE'; },\n      peg$c857 = \"adddate\",\n      peg$c858 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c859 = function() { return 'ADDDATE'; },\n      peg$c860 = \"interval\",\n      peg$c861 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c862 = function() { return 'INTERVAL'; },\n      peg$c863 = function() { return 'YEAR'; },\n      peg$c864 = function() { return 'MONTH'; },\n      peg$c865 = function() { return 'DAY'; },\n      peg$c866 = function() { return 'HOUR'; },\n      peg$c867 = function() { return 'MINUTE'; },\n      peg$c868 = function() { return 'SECOND'; },\n      peg$c869 = \"current_time\",\n      peg$c870 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c871 = function() { return 'CURRENT_TIME'; },\n      peg$c872 = \"current_timestamp\",\n      peg$c873 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c874 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c875 = \"session_user\",\n      peg$c876 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c877 = function() { return 'SESSION_USER'; },\n      peg$c878 = \"global\",\n      peg$c879 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c880 = function() { return 'GLOBAL'; },\n      peg$c881 = \"session\",\n      peg$c882 = peg$literalExpectation(\"SESSION\", true),\n      peg$c883 = function() { return 'SESSION'; },\n      peg$c884 = function() { return 'LOCAL'; },\n      peg$c885 = \"pivot\",\n      peg$c886 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c887 = function() { return 'PIVOT'; },\n      peg$c888 = \"persist\",\n      peg$c889 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c890 = function() { return 'PERSIST'; },\n      peg$c891 = \"persist_only\",\n      peg$c892 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c893 = function() { return 'PERSIST_ONLY'; },\n      peg$c894 = \"add\",\n      peg$c895 = peg$literalExpectation(\"ADD\", true),\n      peg$c896 = function() { return 'ADD'; },\n      peg$c897 = \"column\",\n      peg$c898 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c899 = function() { return 'COLUMN'; },\n      peg$c900 = \"index\",\n      peg$c901 = peg$literalExpectation(\"INDEX\", true),\n      peg$c902 = function() { return 'INDEX'; },\n      peg$c903 = function() { return 'KEY'; },\n      peg$c904 = \"fulltext\",\n      peg$c905 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c906 = function() { return 'FULLTEXT'; },\n      peg$c907 = function() { return 'UNIQUE'; },\n      peg$c908 = \"comment\",\n      peg$c909 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c910 = function() { return 'COMMENT'; },\n      peg$c911 = \"constraint\",\n      peg$c912 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c913 = function() { return 'CONSTRAINT'; },\n      peg$c914 = \"references\",\n      peg$c915 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c916 = function() { return 'REFERENCES'; },\n      peg$c917 = \",\",\n      peg$c918 = peg$literalExpectation(\",\", false),\n      peg$c919 = \"[\",\n      peg$c920 = peg$literalExpectation(\"[\", false),\n      peg$c921 = \"]\",\n      peg$c922 = peg$literalExpectation(\"]\", false),\n      peg$c923 = \";\",\n      peg$c924 = peg$literalExpectation(\";\", false),\n      peg$c925 = \"||\",\n      peg$c926 = peg$literalExpectation(\"||\", false),\n      peg$c927 = \"&&\",\n      peg$c928 = peg$literalExpectation(\"&&\", false),\n      peg$c929 = \"/*\",\n      peg$c930 = peg$literalExpectation(\"/*\", false),\n      peg$c931 = \"*/\",\n      peg$c932 = peg$literalExpectation(\"*/\", false),\n      peg$c933 = \"--\",\n      peg$c934 = peg$literalExpectation(\"--\", false),\n      peg$c935 = \"#\",\n      peg$c936 = peg$literalExpectation(\"#\", false),\n      peg$c937 = peg$anyExpectation(),\n      peg$c938 = /^[ \\t\\n\\r]/,\n      peg$c939 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c940 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c941 = function(n) {\n            return n\n          },\n      peg$c942 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c943 = function(t) { return { dataType: t }; },\n      peg$c944 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c945 = \"MAX\",\n      peg$c946 = peg$literalExpectation(\"MAX\", false),\n      peg$c947 = peg$literalExpectation(\"max\", false),\n      peg$c948 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsestmt();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsestmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsestmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestmt() {\n    var s0;\n\n    s0 = peg$parsequery_statement();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecrud_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinsert_into_set();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsedelete_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecmd_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseproc_stmts();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhere_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseorder_by_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parselimit_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c2(s3, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseorder_by_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parselimit_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c3(s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseon_duplicate_update_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c4(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c5(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_into_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_SET();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseset_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseon_duplicate_update_stmt();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c6(s1, s5, s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parseanalyze_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseattach_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedrop_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetruncate_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parserename_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecall_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseuse_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsealter_table_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseset_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parselock_stmt();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseunlock_stmt();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseshow_stmt();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parsedesc_stmt();\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c7();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c9(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c10(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c13(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c17(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c18;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c18;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c21(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c23();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c24(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c25(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_duplicate_update_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c26) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_KEY();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_UPDATE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseset_list();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseanalyze_stmt() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ANALYZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c29(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseattach_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ATTACH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c30(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c31(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c32(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_db_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c37(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselock_table_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c38(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunlock_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNLOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c43); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c45); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c46(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_SHOW();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c48); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c49) {\n                s5 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c50); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsein_op_right();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsefrom_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parselimit_clause();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c51(s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_SHOW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n              s4 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c53); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n                  s6 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c55); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s4 = [s4, s5, s6];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c56) {\n                s3 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parselike_op_right();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parsewhere_clause();\n                }\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c58(s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseshow_grant_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedesc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DESC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DESCRIBE();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c60(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c61(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c62(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c63(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c67();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = [];\n                            s14 = peg$parsecreate_constraint_definition();\n                            while (s14 !== peg$FAILED) {\n                              s13.push(s14);\n                              s14 = peg$parsecreate_constraint_definition();\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_options();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_IGNORE();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = peg$parseKW_REPLACE();\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseKW_AS();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseunion_stmt();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c68(s1, s3, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c69(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEMA();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c70(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c71(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parselock_table();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parselock_table();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parselock_table();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c73) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseshow_grant_for();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c75(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c76;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c76;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c78(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c79) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c80); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c83) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c84); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c85) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c86); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c87) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c88); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c89(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c90) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c91); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c92) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c93); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c94) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c95); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c96) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c97); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c98(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_not_null();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseliteral_null();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedefault_expr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c99) {\n                      s9 = input.substr(peg$currPos, 14);\n                      peg$currPos += 14;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c101) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c103) {\n                            s12 = input.substr(peg$currPos, 7);\n                            peg$currPos += 7;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                          }\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {\n                              s14 = input.substr(peg$currPos, 3);\n                              peg$currPos += 3;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsekeyword_comment();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecollate_expr();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsecolumn_format();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsestorage();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsereference_definition();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c107(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21);\n                                              s0 = s1;\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c108(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c109(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parselock_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c110(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c111) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c112); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_VAR__PRE_AT();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseident();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseshow_grant_for_using();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c113(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_check();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c114(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c115(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c117(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c118(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c119) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c120); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c121) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c122); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c123) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c124); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c125(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c126) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c130) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c131); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c133) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c134); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c135) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c136); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c137) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c138); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c139(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c99) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c100); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c140) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c142) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c144) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c146) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c148) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c149); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c150(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c151) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c153(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c154) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c155); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c156;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c157); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c158) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c159); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c160) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c161); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c92) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c93); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c156;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c157); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c162(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c163) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c164); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c165(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c166(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c167) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c168); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c169) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c170); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c171(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_RENAME_TABLE();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c172) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c173); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c174) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c175); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c176(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c177) {\n        s1 = input.substr(peg$currPos, 12);\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c178); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c179) {\n            s3 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c180); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c181(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseshow_grant_for_using_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c182(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_grant_for_using_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c103) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c104); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c106); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c183(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c184(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c185) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c187(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_check() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c188) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c189); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c190) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c191); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c111) {\n                  s8 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c192) {\n                      s10 = input.substr(peg$currPos, 11);\n                      peg$currPos += 11;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c193); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLPAREN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpr();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseRPAREN();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c194(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c195) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c199(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c16(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c200(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c201(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseindex_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c202) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c203); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c204) {\n              s3 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c205); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseident_name();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c206(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c207) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c208); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c209) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c210); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c211(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsekeyword_comment();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c212) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c213); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c214) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c215); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c217); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse___();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c218(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c52) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c55); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c219();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c220(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c221(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c222(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c223(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c224) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c225); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c226) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c227); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c228) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c229); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c230) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c231); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c232) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c233); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c234(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c217); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c235) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c214) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c215); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c237) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c239) {\n      s0 = peg$c239;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c18;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c241) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c242); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c243) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c244); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ANALYZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c245) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c246); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ATTACH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c247) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c248); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c249) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c250); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c251) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c252); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c253) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c254); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESCRIBE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c255) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c256); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c257;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c258); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c259) {\n      s0 = peg$c259;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c261;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c262); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c263) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEMA() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c265) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c266); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c267) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c268); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c269) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c270); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c142) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c143); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c271;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c272); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c273;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c274); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c275(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c276(s1, s3, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c277(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c278) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c279); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c280) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c281); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c282(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c271;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c272); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c273;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c274); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c283(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c284(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c271;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c272); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c273;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c274); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c285(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c16(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c286(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parsequalify_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parseorder_by_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parselimit_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parse__();\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parsewindow_clause();\n                                                          if (s28 === peg$FAILED) {\n                                                            s28 = null;\n                                                          }\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c287(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26, s28);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c111) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c112); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c288) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c289); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c290) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c291); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c292) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c293); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c294(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c295(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebinary_column_expr();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseexpr();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c296(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c280) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c281); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c243) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c244); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c297(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c298(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c299(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseKW_SAFE_OFFSET();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseKW_SAFE_ORDINAL();\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c300(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c301(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsecolumn_offset_expr();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parsecolumn_without_kw();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSTAR();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c302(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn_offset_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c303(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr_alias();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c304(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c304(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c305) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c307(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c308(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c111) {\n                  s7 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsein_op_right();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsealias_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c309(s5, s9, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c310(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c311(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c312(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c313(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c313(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c314(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c315(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c316(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehint() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    if (peg$c317.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c318); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c319.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c320); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident_name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (peg$c321.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c322); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseident_name();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (peg$c323.test(input.charAt(peg$currPos))) {\n                        s10 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c324); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetablesample() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c325) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c327) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c328); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c329) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c330); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s5 = peg$c271;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c272); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c331) {\n                      s9 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c333) {\n                        s9 = input.substr(peg$currPos, 4);\n                        peg$currPos += 4;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c334); }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s11 = peg$c273;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c274); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsefrom_unnest_item();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsehint();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetablesample();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsealias_clause();\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c335(s1, s2, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsetablesample();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c336(s3, s7, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c337();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c338();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c339();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c340(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c341(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_without_kw();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_without_kw();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_without_kw();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c342(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident_without_kw();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c343(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c345(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c344(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequalify_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_QUALIFY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c346(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c347(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c348(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c349(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c350(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c351(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c354) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c355); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c356) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c357); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c358) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c359); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c360) {\n                            s12 = peg$c360;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c361); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c362();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_frame_following();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_frame_preceding();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c363(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_ROWS();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_BETWEEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsewindow_frame_preceding();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AND();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsewindow_frame_following();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c364(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c365) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c366); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c356) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c357); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c367(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c356) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c357); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c368(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c369) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c370); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c371();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c354) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c355); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c372(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c373(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c169) {\n          s4 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c170); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseliteral_string();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_DESC();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ASC();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c374(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c375(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c376(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunion_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c299(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c377(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c378(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c379(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c380(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecomparison_op_right();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c381(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c382(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_OR();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseLOGIC_OPERATOR();\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c384(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c385;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c386); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c18;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c387(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c388(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c389(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c390(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c391(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c392) {\n      s0 = peg$c392;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c394;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c395); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c396) {\n          s0 = peg$c396;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c397); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c398) {\n            s0 = peg$c398;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c399); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c400;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c401); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c18;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c402) {\n                  s0 = peg$c402;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c403); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c404(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c405(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c406(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c390(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c390(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c390(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c407(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c408(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c409(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c11(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c410;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c412;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c413); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c414(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c415;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c416); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c417;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c418); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c419;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c420); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsearray_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsestruct_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecast_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseaggr_func();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsefunc_call();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecase_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseinterval_expr();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecolumn_ref();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseparam();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseLPAREN();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseor_and_where_expr();\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseRPAREN();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c421(s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c422(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c423(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c424(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c425(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c426(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_without_kw();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecolumn_without_kw();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseDOT();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parse__();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsecolumn_without_kw();\n              if (s8 !== peg$FAILED) {\n                s5 = [s5, s6, s7, s8];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDOT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecolumn_without_kw();\n                  if (s8 !== peg$FAILED) {\n                    s5 = [s5, s6, s7, s8];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c427(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_without_kw();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_without_kw();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c428(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c429(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c430(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c432(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c433;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c435.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c435.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c436); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c433;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c434); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c437(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c156;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c157); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c438.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c439); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c438.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c439); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c156;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c157); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c437(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c440;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c442.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c443); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c442.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c443); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c440;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c441); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c444(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0;\n\n    s0 = peg$parsecolumn_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_without_kw() {\n    var s0;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c445(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c447(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c448.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c450.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c452.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s1 = peg$c454;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s1 = peg$c257;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c258); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseident_name();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c456(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseaggr_func();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsealias_clause();\n                    if (s11 === peg$FAILED) {\n                      s11 = null;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9, s10, s11];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseaggr_func();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsealias_clause();\n                      if (s11 === peg$FAILED) {\n                        s11 = null;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c457(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c458(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c217); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c459(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c217); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c460(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c461(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c462(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c463(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c464(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseorder_by_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c465(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexpr();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseorder_by_clause();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c466(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c415;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c416); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c467();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c468(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c469(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsescalar_time_func();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c470(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident_name();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_name();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c471(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_SESSION_USER();\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c472) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c473); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c474) {\n        s1 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c475); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c476) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c477); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c478) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c479); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c480) {\n              s1 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c481); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c482) {\n                s1 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c483); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c484) {\n                  s1 = input.substr(peg$currPos, 5);\n                  peg$currPos += 5;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c485); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c486) {\n                    s1 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c487); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c488) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c490) {\n                        s1 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c491); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c492) {\n                          s1 = input.substr(peg$currPos, 7);\n                          peg$currPos += 7;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c493); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c494) {\n                            s1 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c495); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c496) {\n                              s1 = input.substr(peg$currPos, 10);\n                              peg$currPos += 10;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c497); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 12).toLowerCase() === peg$c498) {\n                                s1 = input.substr(peg$currPos, 12);\n                                peg$currPos += 12;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c499); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c500) {\n                                  s1 = input.substr(peg$currPos, 6);\n                                  peg$currPos += 6;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c501); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c502) {\n                                    s1 = input.substr(peg$currPos, 5);\n                                    peg$currPos += 5;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c503); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c504) {\n                                      s1 = input.substr(peg$currPos, 7);\n                                      peg$currPos += 7;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c506) {\n                                        s1 = input.substr(peg$currPos, 6);\n                                        peg$currPos += 6;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c507); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c508) {\n                                          s1 = input.substr(peg$currPos, 4);\n                                          peg$currPos += 4;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c509); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c510) {\n                                            s1 = input.substr(peg$currPos, 8);\n                                            peg$currPos += 8;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c511); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c512) {\n                                              s1 = input.substr(peg$currPos, 13);\n                                              peg$currPos += 13;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c513); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 15).toLowerCase() === peg$c514) {\n                                                s1 = input.substr(peg$currPos, 15);\n                                                peg$currPos += 15;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c515); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c516) {\n                                                  s1 = input.substr(peg$currPos, 4);\n                                                  peg$currPos += 4;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c517); }\n                                                }\n                                                if (s1 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c518) {\n                                                    s1 = input.substr(peg$currPos, 4);\n                                                    peg$currPos += 4;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c520(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c521(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c522) {\n        s1 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c523); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseCOMMA();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseextract_filed();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseRPAREN();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c524(s5, s9);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c525(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c526(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c527(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c528(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c529();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c530();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c531();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c532();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c533) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c534); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c156;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c157); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c156;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c157); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c535(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c533) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c534); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c433;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c433;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c434); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c536(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c156;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c157); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c156;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c157); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c537(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c433;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c433;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c434); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c537(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c538.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c539); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c540.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c542) {\n      s1 = peg$c542;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c544();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c545) {\n        s1 = peg$c545;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c546); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c547();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c548) {\n          s1 = peg$c548;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c549); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c550();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c551) {\n            s1 = peg$c551;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c552); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c553();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c554) {\n              s1 = peg$c554;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c555); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c556();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c557) {\n                s1 = peg$c557;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c558); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c559();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c560) {\n                  s1 = peg$c560;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c561); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c562();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c563) {\n                    s1 = peg$c563;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c564); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c565();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c566) {\n                      s1 = peg$c566;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c568();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c569) {\n                        s1 = peg$c569;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c570); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c571(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c572;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c573); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c574();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c575) {\n                            s1 = peg$c575;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c576); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c577();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c578) {\n                              s1 = peg$c578;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c579); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c580();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.substr(peg$currPos, 2) === peg$c581) {\n                                s1 = peg$c581;\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c582); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c583();\n                              }\n                              s0 = s1;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c584.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c586(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c587(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c588(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c589(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c590(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c412;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c413); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c410;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c411); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c591(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c412;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c413); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c410;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c411); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c592(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c76;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c594(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c595(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c596.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c598.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c599); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c600.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c602.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c603); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c82); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c607) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c608); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c613) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c614); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c620) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c622) {\n      s1 = peg$c622;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c623); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c624) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c628) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c630();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c631) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c632); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c633) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c90) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c91); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c290) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c291); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c637) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c639();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c640) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c642();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c169) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c643();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c212) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c213); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c644) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c652) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c656) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c658) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c659); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERSECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c278) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c279); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXCEPT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c280) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c662) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c664();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c665) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c667) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c668); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c669) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c670); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c202) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c203); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c671) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c672); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c673) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c674); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c675) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c676); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c677) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c678); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_QUALIFY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c679) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c680); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c681) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c682); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c683) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c684); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c685();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SAFE_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c688();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c689) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c691) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c692); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c693();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SAFE_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c696();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c697) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c698); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c699();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c700) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c701); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c702();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c703) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c704); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c705();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c706) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c707); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c708();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c709) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c710); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c711();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c712) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c713); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c714();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c715) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c716); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c717();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c718) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c719); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c720();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c721) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c722); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c723();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c190) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c191); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c724();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c727();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c728) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c729); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c730();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c746) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c747); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c748();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c751();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c752) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c753); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c754) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c755); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c756) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c757); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c758) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c759); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c760) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c761); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c762) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c763); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c764) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c765); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c766();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c769();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c770) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c771); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c772();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c775();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c776) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c777); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c778();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c797) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c798); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c799();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c800) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c801); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c802();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c803) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c804); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c805();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c806) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c807); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c808();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c809) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c810); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c811();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c812) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c813); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c814();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c815) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c816); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c817();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c818) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c819); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c820();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c821) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c822); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c823();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c824) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c825); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c826();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c827) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c828); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c829();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c830) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c831); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c832();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c833) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c834); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c835();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c836) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c837); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c838();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c476) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c840) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c841); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c333) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c843();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c508) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c509); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c844();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c845) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c846); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c847();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c848) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c849); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c850();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c851) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c852); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c853();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c854) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c855); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c856();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c857) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c858); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c859();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c860) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c861); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c862();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c863();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c502) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c503); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c864();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c865();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c866();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c867();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c868();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c869) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c870); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c871();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c872) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c873); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c874();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c875) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c876); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c877();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c878) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c879); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c880();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c881) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c882); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c883();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c174) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c175); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c884();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c885) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c886); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c887();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c888) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c889); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c890();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c891) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c892); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c893();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c894) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c895); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c896();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c897) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c898); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c899();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c900) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c901); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c902();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c106); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c101) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c102); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c907();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c908) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c909); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c910();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c911) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c912); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c913();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c914) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c915); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c916();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c76;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c917;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c918); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c415;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c416); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c271;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c272); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c273;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c274); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c400;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c394;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c919;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c920); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c921;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c922); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c923;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c924); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c925) {\n      s0 = peg$c925;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c927) {\n      s0 = peg$c927;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c928); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c929) {\n      s1 = peg$c929;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c930); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c931) {\n        s5 = peg$c931;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c932); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c931) {\n          s5 = peg$c931;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c932); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c931) {\n          s3 = peg$c931;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c932); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c933) {\n      s1 = peg$c933;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c934); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c935;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c936); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c937); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c938.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c939); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c584.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c585); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c584.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c585); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c937); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c940(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c941(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c942(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLPAREN();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            if (peg$c596.test(input.charAt(peg$currPos))) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c597); }\n            }\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                if (peg$c596.test(input.charAt(peg$currPos))) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c597); }\n                }\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseRPAREN();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseLPAREN();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              if (peg$c596.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c597); }\n              }\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  if (peg$c596.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c597); }\n                  }\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseRPAREN();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c943(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c943(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c596.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c597); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c596.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c597); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c944(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c943(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_BYTES();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseLPAREN();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          if (peg$c596.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c597); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c596.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c597); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c945) {\n              s5 = peg$c945;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c946); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c734) {\n                s5 = peg$c734;\n                peg$currPos += 3;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c947); }\n              }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseRPAREN();\n              if (s7 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6, s7];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c943(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c948(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c948(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': false,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n      'PIVOT': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': false,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      // 'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      // 'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (!global && window) window.global = window\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}